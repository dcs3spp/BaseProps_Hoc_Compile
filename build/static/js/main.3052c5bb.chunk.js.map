{"version":3,"sources":["features/posts/constants.ts","components/Home.tsx","components/Post.tsx","features/errors/constants.ts","features/posts/actions.ts","features/errors/actions.ts","higher-order-components/withErrorListener.tsx","containers/PostsList.tsx","higher-order-components/componentId/withId.tsx","components/App.tsx","store/utils.ts","features/posts/epics.ts","store/rootEpic.ts","features/errors/epics.ts","features/posts/reducer.ts","features/errors/reducer.ts","store/rootReducer.ts","services/index.ts","store/index.ts","index.tsx"],"names":["actions","Home","react","react_router_dom","to","Post","_ref","post","id","constants","allPostsAction","createAsyncAction","postConstants","ALL_POSTS_REQUEST","ALL_POSTS_SUCCESS","errorConstants","NOTIFY_ERROR","clearErrorAction","createAction","CLEAR_ERROR","fromAction","fromComponent","history","navigateTo","undefined","mapErrorInfoDispatchToProps","clearError","ErrorInfoConnected","connect","info","message","onClick","console","log","dispatchProps","fetchPosts","request","PostsListWithErrorListener","BaseComponent","ErrorListener","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","restProps","esm_extends","props","concat","filteredErrors","length","assign","React","displayName","name","WrappedComponent","ConnectedHoc","state","ownProps","uniqueId","_class","_temp","IdHoC","_getPrototypeOf2","_this","_len","args","Array","_key","call","String","cuid","withId","withRouter","withErrorListener","isLoading","posts","isLoadingPosts","connector","_ref$posts","componentId","fail","Math","random","style","marginTop","padding","map","element","Post_Post","App","fallback","react_router","exact","path","component","render","composeEnhancers","window","APP_CONF","mode","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","badUrl","combineEpics","action$","state$","api","pipe","filter","isActionOf","action","payload","url","switchMap","getJSON","success","catchError","error","of","failure","type","tap","push","ignoreElements","createReducer","handleAction","postsReducer","combineReducers","handleType","errors","newItem","find","item","addError","JSON","stringify","removeError","errorsReducer","rootReducer","services","ajax","epicMiddleware","createEpicMiddleware","dependencies","middlewares","enhancer","applyMiddleware","store","createStore","run","rootEpic","rootElement","document","getElementById","es","App_App"],"mappings":"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","file":"static/js/main.3052c5bb.chunk.js","sourcesContent":["enum actions {\n  ALL_POSTS_REQUEST = \"[course] ALL_POSTS_REQUEST\",\n  ALL_POSTS_SUCCESS = \"[course] ALL_POSTS_SUCCESS\",\n  ALL_POSTS_FAIL = \"[course] ALL_POSTS_FAIL\"\n}\n\nexport default actions;\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const Home = (): JSX.Element => (\n  <>\n    <p>Home</p>\n    <Link to=\"/posts\">Posts</Link>\n  </>\n);\n","import * as React from \"react\";\n\nimport { Post as PostModel } from \"../features/posts/types\";\n\ntype PostProps = {\n  post: PostModel;\n};\nexport const Post = ({ post }: PostProps): JSX.Element => (\n  <>\n    <>\n      <p>{post.id}</p>\n    </>\n  </>\n);\n ","enum constants {\n  CLEAR_ERROR = \"[core] CLEAR_ERROR\",\n  NOTIFY_ERROR = \"[core] NOTIFY_ERROR\"\n}\n\nexport default constants;\n","import { createAsyncAction } from \"typesafe-actions\";\n\nimport postConstants from \"./constants\";\nimport errorConstants from \"../errors/constants\";\nimport { FailureNotify } from \"../errors/types\";\nimport { Post, PostRequest } from \"./types\";\n\n/**\n * Generate a random failure occurrence\n */\nconst randomiseNetworkConnectionFlag = () => {\n  const fail = Math.random() < 0.5;\n  return fail;\n};\n\nexport const createPostsRequest = (fromComponent: string): PostRequest => {\n  const result: PostRequest = {\n    componentId: fromComponent,\n    fail: randomiseNetworkConnectionFlag()\n  };\n  return result;\n};\n\nexport const allPostsAction = createAsyncAction(\n  postConstants.ALL_POSTS_REQUEST,\n  postConstants.ALL_POSTS_SUCCESS,\n  errorConstants.NOTIFY_ERROR\n)<PostRequest, Post[], FailureNotify>();\n","import { createAction } from \"typesafe-actions\";\nimport { History } from \"history\";\n\nimport constants from \"./constants\";\nimport { ClearError } from \"./types\";\n\nexport const clearErrorAction = createAction(\n  constants.CLEAR_ERROR,\n  (\n    fromAction: string,\n    fromComponent: string,\n    history?: History,\n    navigateTo?: string\n  ): ClearError => ({\n    history: history ? history : undefined,\n    navigateTo: navigateTo ? navigateTo : undefined,\n    fromAction: fromAction,\n    fromComponent: fromComponent\n  })\n)<ClearError>();\n","/**\n * This codesandbox was created for stackoverflow question\n * [here](https://stackoverflow.com/questions/59088446/experiencing-compile-error-with-a-higher-order-components-mapstate-function-tha/59104893#59104893)\n *\n * Also asked question at [react-redux-typescript guide](https://github.com/piotrwitek/react-redux-typescript-guide/issues/195)\n * Piotrwitek is a very helpful guy, who has written some excellent guides on Typescript development with react-redux.\n * Most material out there on the internet is javascript examples or only covers a limited range of topics.\n * Try https://github.com/piotrwitek/react-redux-typescript-guide and https://github.com/piotrwitek/typesafe-actions\n * for a fully comprehensive guide covering wide range of topics. From my point of view as a new react-redux developer\n * Piotrwitek and his site have really really helped my learning experience.\n *\n * I have included the key snippet of code from Piotrwitek at the top here that allowed fully typed connect issue.\n *\n * type InjectedProps = TStateProps & TDispatchProps;\n *\n * type HocProps = Diff<BaseProps, InjectedProps>;\n *\n * class Hoc extends React.Component<InjectedProps> { ... }\n *\n * const ConnectedHoc = connect<\n *    TStateProps,\n *    TDispatchProps,\n *    HocProps,\n *    RootState\n *  >(\n *    mapStateToProps,\n *    dispatchProps\n *  )(Hoc);\n */\nimport * as React from \"react\";\n\nimport { connect, MapStateToProps } from \"react-redux\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport { clearErrorAction } from \"../features/errors/actions\";\nimport { Diff } from \"utility-types\";\nimport { FailureNotify } from \"../features/errors/types\";\nimport { filterErrors } from \"../features/errors/selectors\";\n\nimport { RootState } from \"typesafe-actions\";\nimport { withId } from \"./componentId/withId\";\n\n/**\n * Type declarations\n */\nexport type RequiredProps = { uniqueId: string };\n\n/**\n * Internal components\n */\n\n/** ================================= ErrorInfo ======================================== */\n\n/**\n * Redux types\n */\nconst mapErrorInfoDispatchToProps = {\n  clearError: clearErrorAction\n};\n\ntype ErrorInfoReduxProps = typeof mapErrorInfoDispatchToProps;\ntype ErrorInfoProps = { info: FailureNotify } & RouteComponentProps &\n  ErrorInfoReduxProps;\n\n/**\n * Functional component to display error info and dispatch CLEAR_ERROR action when unmounted.\n * @param param0  properties for display error info and dispatching CLEAR_ERROR action\n */\nconst ErrorInfoBase = ({\n  info,\n  clearError,\n  history\n}: ErrorInfoProps): JSX.Element => {\n  function goHome(): void {\n    console.log(\"Go home button has been clicked\");\n    clearError(info.fromAction, info.fromComponent, history, \"/\");\n  }\n  return (\n    <React.Fragment>\n      <p>Error {info.message}</p>\n      <p>Received from action {info.fromAction}</p>\n      <p>Received for component id {info.fromComponent}</p>\n      <button onClick={goHome}>Home</button>\n    </React.Fragment>\n  );\n};\n\n/** Connect the ErrorInfoBase component to the redux store */\nconst ErrorInfoConnected = connect<\n  {},\n  typeof mapErrorInfoDispatchToProps,\n  {},\n  RootState\n>(\n  null,\n  mapErrorInfoDispatchToProps\n)(ErrorInfoBase);\n\n/** ================================== End ErrorInfo =================================== */\n\n/* ===================================== HoC =========================================== */\n\n/**\n * withErrorListener\n * HoC that renders errors on the redux store raised for a component.\n * The base component must remain unchanged with no new properties.\n * The withErrorListener enhances the behaviour of the base component by listening on the redux store for errors\n * notified.\n *\n * If no errors are found then render base component with it's own properties.\n * @param BaseComponent  The component to wrap. This must have a uniqueId property rendered by withId HoC.\n */\nexport const withErrorListener = <BaseProps extends RequiredProps>(\n  BaseComponent: React.ComponentType<BaseProps>\n) => {\n  /**\n   * Injected properties for use inside the HOC component class only\n   * These are excluded from react-redux connect, i.e. they are not injected into connect function's ownProps argument\n   * They are also not injected into the base component.\n   * The only propertis that should be possed down when rendering BaseComponent is BaseProps.\n   */\n  type InjectedProps = TReduxProps & RouteComponentProps; //this solves typed connect issue, how to pass on base component's own props at line 174....\n  // type InjectedProps = TReduxProps & RouteComponentProps & BaseProps; // including base props here breaks the typed connect, do I need this to pass on in line 177...\n\n  /**\n   * Remove the following injected properties injected from Base props:\n   * - redux state and dispatch\n   * - react router\n   */\n  type HocProps = Diff<BaseProps, InjectedProps>;\n\n  /** == Redux properties ================================================================ **/\n\n  /**\n   * The object type returned by mapState function.\n   * I need to declare it, as opposed to using TState, otherwise a circular reference is created.\n   */\n  type StateProps = {\n    filteredErrors: FailureNotify[];\n  };\n\n  /**\n   * Function to return subset of store state that filters errors for the wrapped component via uniqueId property\n   * @param state  The root state\n   * @param ownProps  uniqueId property is required to fullfil filter operation.\n   * @returns  StateProps type that contains a list of filtered errors of type FailureNotify.\n   */\n  const mapState: MapStateToProps<StateProps, RequiredProps, RootState> = (\n    state: RootState,\n    ownProps: RequiredProps\n  ): StateProps => {\n    // uniqueId property is always undefined here???\n    console.log(`withErrorListener mapStateToProps => ${ownProps.uniqueId}`);\n    return {\n      filteredErrors: [] // filterErrors(state.errors, ownProps)\n    } as StateProps;\n  };\n\n  /**\n   * Dispatch object. Each object key is mapped to an action.\n   */\n  const dispatchProps = {\n    clearError: clearErrorAction\n  };\n\n  type TDispatchProps = typeof dispatchProps;\n  type TStateProps = ReturnType<typeof mapState>;\n  type TReduxProps = TStateProps & TDispatchProps;\n\n  /** =============================== ErrorListener Component Class ==================== */\n\n  /**\n   * ErrorListener component class\n   * This should accept:\n   * - Base component properties\n   * - Redux state and dispatch properties\n   */\n  class ErrorListener extends React.Component<InjectedProps, never> {\n    static displayName = `withErrorListener(${BaseComponent.name})`;\n    static readonly WrappedComponent = BaseComponent;\n\n    /**\n     * Render error if there is one to display, otherwise render the base component\n     * @returns Rendered error if error occurred. Rendered base component if no error occurred. Base Component is rendered with it's own props only\n     */\n    render() {\n      const { ...restProps } = this.props;\n      console.log(\n        `withErrorListener [error_count=${this.props.filteredErrors.length}]`\n      );\n\n      if (this.props.filteredErrors.length > 0) {\n        return (\n          <ErrorInfoConnected\n            info={this.props.filteredErrors[0]}\n            {...restProps}\n          />\n        );\n      } else {\n        // false positive linter error, tsc compiles\n        return <BaseComponent {...restProps as BaseProps} />;\n      }\n    }\n  }\n\n  // connect to redux store\n  const ConnectedHoc = connect<\n    TStateProps,\n    TDispatchProps,\n    HocProps, // this merges properties with ownProps, exclude redux and router props\n    RootState\n  >(\n    mapState,\n    dispatchProps\n  )(ErrorListener); // issue solved by piotrwitek, thanks again!!! Now I have a fully typed connected HoC!!!!!\n\n  // connect to router\n  const RoutedHoc = withRouter(ConnectedHoc);\n\n  // inject uniqueId\n  return withId(RoutedHoc);\n};\n","import * as React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { RootState } from \"typesafe-actions\";\n\nimport { Post as PostComponent } from \"../components/Post\";\n\nimport { allPostsAction, createPostsRequest } from \"../features/posts/actions\";\nimport { RequiredProps } from \"../higher-order-components/withErrorListener\";\nimport { Post } from \"../features/posts/types\";\nimport { withErrorListener } from \"../higher-order-components/withErrorListener\";\n\ntype StateProps = {\n  isLoading: boolean;\n  posts: Post[];\n};\n\n/**\n * Redux dispatch and state mappings\n */\nconst dispatchProps = {\n  fetchPosts: allPostsAction.request\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  isLoading: state.posts.isLoadingPosts,\n  posts: [] // state.posts.posts\n});\n\nconst connector = connect(\n  mapStateToProps,\n  dispatchProps\n);\n\ntype ReduxProps = ConnectedProps<typeof connector>;\n\n/**\n * Component property type definitions\n */\ntype PostsListProps = ReduxProps & RequiredProps;\n\n/**\n * CourseList component\n */\nconst PostsListBase = ({\n  posts = [],\n  uniqueId,\n  fetchPosts,\n  isLoading\n}: PostsListProps): JSX.Element => {\n  // dispatch fetch posts action on mount\n  React.useEffect(() => {\n    console.log(\n      `PostListBase dispatching PostsRequest action with id ${uniqueId}`\n    );\n    fetchPosts(createPostsRequest(uniqueId));\n  }, [fetchPosts, uniqueId]);\n\n  if (isLoading) {\n    return (\n      <>\n        <p>Loading...</p>\n        <Link to=\"/\">Home</Link>\n      </>\n    );\n  }\n\n  return (\n    <div style={{ marginTop: 20, padding: 30 }}>\n      <Link to=\"/\">Home</Link>\n      <h2>List of post id's</h2>\n      {\n        <ul>\n          {posts.map(element => (\n            <li key={element.id}>\n              <PostComponent post={element} />\n            </li>\n          ))}\n        </ul>\n      }\n    </div>\n  );\n};\n\n// connect to redux\nconst PostsListConnected = connector(PostsListBase);\n\n// connect to error listener\nexport const PostsListWithErrorListener = withErrorListener(PostsListConnected);\n","import * as React from \"react\";\nimport cuid from \"cuid\";\nimport { Diff } from \"utility-types\";\n\n/**\n * Type declarations\n */\ntype InjectedProps = {\n  uniqueId: string;\n};\n\nexport const withId = <BaseProps extends InjectedProps>(\n  BaseComponent: React.ComponentType<BaseProps>\n) => {\n  /**\n   * Type declarations\n   */\n  type HocProps = Diff<BaseProps, InjectedProps>;\n\n  type HocState = {\n    readonly uniqueId: string;\n  };\n\n  return class IdHoC extends React.Component<HocProps, HocState> {\n    static displayName = `withIdListener(${BaseComponent.name})`;\n    static readonly WrappedComponent = BaseComponent;\n    \n    readonly state: HocState = {\n      uniqueId: String(cuid()),\n    }\n\n    /**\n     * Inject uniqueId property into base component and passes down original properties\n     * @returns Rendered component.\n     */\n    render() {\n      const { ...restProps } = this.props;\n      const { uniqueId } = this.state;\n      return <BaseComponent uniqueId = { uniqueId } {...restProps as BaseProps} />;\n    }\n  };\n};\n","import * as React from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport { Home } from \"./Home\";\nimport { PostsListWithErrorListener } from \"../containers/PostsList\";\n\ntype AppProps = {};\n\nexport class App extends React.Component<AppProps, {}> {\n  public render(): JSX.Element {\n    return (\n      <BrowserRouter>\n        <div>\n          <React.Suspense fallback={<div>LoaderOptionsPlugin...</div>}>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route\n                exact\n                path=\"/posts\"\n                render={(props): JSX.Element => (\n                  <PostsListWithErrorListener {...props} />\n                )}\n              />\n            </Switch>\n          </React.Suspense>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n","import { compose } from \"redux\";\n\nexport const composeEnhancers =\n  (window.APP_CONF.mode === \"development\" &&\n    window &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n","import { RootAction, RootState, Services } from \"typesafe-actions\";\n\nimport { Epic } from \"redux-observable\";\nimport { isActionOf } from \"typesafe-actions\";\nimport { of } from \"rxjs\";\nimport { catchError, filter, map, switchMap } from \"rxjs/operators\";\n\nimport { allPostsAction } from \"./actions\";\nimport { Post } from \"./types\";\n\nconst badUrl = \"https://ewlkjher.com\";\nconst postsUrl = \"https://jsonplaceholder.typicode.com/posts\";\n\nexport const allPostsHandler: Epic<\n  RootAction,\n  RootAction,\n  RootState,\n  Services\n> = (action$, state$, { api }) =>\n  action$.pipe(\n    filter(isActionOf(allPostsAction.request)),\n    map(action => {\n      if (action.payload && action.payload.fail === true) {\n        console.log(`Simulating network error by requesting ${badUrl}`);\n        return { action: action, url: badUrl };\n      } else {\n        return { action: action, url: postsUrl };\n      }\n    }),\n    switchMap(request =>\n      api.getJSON<Post[]>(request.url).pipe(\n        map(allPostsAction.success),\n        catchError(error => {\n          console.log(\"allPostsHandler dispatching a failure notification\");\n          return of(\n            allPostsAction.failure({\n              fromAction: request.action.type,\n              fromComponent: request.action.payload.componentId,\n              message: error.message\n            })\n          );\n        })\n      )\n    )\n  );\n","import { combineEpics } from \"redux-observable\";\n\nimport * as postEpics from \"../features/posts/epics\";\nimport * as errorEpics from \"../features/errors/epics\";\n\nexport default combineEpics(\n  postEpics.allPostsHandler,\n  errorEpics.clearErrorEpic\n);\n","import { Epic } from \"redux-observable\";\nimport { filter, tap, ignoreElements } from \"rxjs/operators\";\nimport { isActionOf } from \"typesafe-actions\";\n\nimport { RootAction, RootState, Services } from \"typesafe-actions\";\n\nimport { clearErrorAction } from \"./actions\";\n\nexport const clearErrorEpic: Epic<\n  RootAction,\n  RootAction,\n  RootState,\n  Services\n> = (action$, state$, { api }) =>\n  action$.pipe(\n    filter(isActionOf(clearErrorAction)),\n    tap(action => {\n      console.log(\n        `clearErrorEpic runnning for clearErrorAction ${action.type}`\n      );\n      if (\n        action.payload &&\n        action.payload.history &&\n        action.payload.navigateTo\n      ) {\n        console.log(\n          `clearErrorEpic redirecting to ${action.payload.navigateTo}`\n        );\n        action.payload.history.push(action.payload.navigateTo);\n      }\n    }),\n    ignoreElements()\n  );\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"typesafe-actions\";\n\nimport { allPostsAction } from \"./actions\";\nimport { Post } from \"./types\";\n\nconst isLoadingPosts = createReducer(false as boolean)\n  .handleAction([allPostsAction.request], () => true)\n  .handleAction([allPostsAction.success, allPostsAction.failure], () => false);\n\nconst posts = createReducer([] as Post[]).handleAction(\n  allPostsAction.success,\n  (state, action) => action.payload\n);\n\nconst postsReducer = combineReducers({\n  isLoadingPosts,\n  posts\n});\n\nexport default postsReducer;\nexport type PostsState = ReturnType<typeof postsReducer>;\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"typesafe-actions\";\n\nimport { ClearError } from \"./types\";\nimport errorConstants from \"./constants\";\nimport { FailureNotify } from \"./types\";\n\n/**\n * Errors are immutably stored in an array as: FailureNotify[]\n * A CLEAR_ERROR action removes the error from the store\n */\n\nconst initialState: FailureNotify[] = [];\n\n/**\n * Construct an array of failure notifications containing the new occurrence\n * @param state  List of current failure notifications\n * @param newItem  An new failure notification\n * @returns List of failure notifications containing the new failure instance\n */\nconst addError = (\n  state: FailureNotify[],\n  newItem: FailureNotify\n): FailureNotify[] => {\n  if (state.find(item => item.fromComponent === newItem.fromComponent)) {\n    // if there is already an item then replace it with newItem\n    return state.map(item => {\n      if (item.fromComponent === newItem.fromComponent) {\n        return newItem;\n      }\n      return item;\n    });\n  } else {\n    // create a new array with the new item appended\n    return state.concat([newItem]);\n  }\n};\n\n/**\n * Remove a failure notification from the list\n * @param state  List of current failures\n * @param item   The item to remove from the list.\n * @returns List of failure notifications with item removed\n */\nconst removeError = (\n  state: FailureNotify[],\n  item: ClearError\n): FailureNotify[] => {\n  const newList: FailureNotify[] = state.filter(\n    element => element.fromComponent !== item.fromComponent\n  );\n\n  return newList;\n};\n\n/**\n * Reducer that adds failure notification to array upon receipt of NOTIFY_ERROR action.\n * The reducer removes an item from the array upon receipt of CLEAR_ERROR action.\n */\nconst error = createReducer(initialState as FailureNotify[])\n  .handleType(\n    errorConstants.NOTIFY_ERROR,\n    (state, action): FailureNotify[] => {\n      console.log(\n        `error reducer processing notification of an error from component... ${\n          action.payload.fromComponent\n        }`\n      );\n      const errors: FailureNotify[] = addError(state, action.payload);\n      console.log(`error reducer state is now => ${JSON.stringify(errors)}`);\n      return errors;\n    }\n  )\n  .handleType(\n    errorConstants.CLEAR_ERROR,\n    (state, action): FailureNotify[] => {\n      console.log(`error reducer processing clear error action...`);\n      return removeError(state, action.payload);\n    }\n  );\n\nconst errorsReducer = combineReducers({\n  error\n});\n\n/**\n * Exports\n */\nexport default errorsReducer;\nexport type ErrorState = ReturnType<typeof errorsReducer>;\n","import { combineReducers } from \"redux\";\n\nimport postsReducer from \"../features/posts/reducer\";\nimport errorsReducer from \"../features/errors/reducer\";\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  errors: errorsReducer\n});\n\nexport default rootReducer;\n","import { ajax } from \"rxjs/ajax\";\n\nexport default {\n  api: ajax\n};\n","import { RootAction, RootState } from \"typesafe-actions\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { createEpicMiddleware } from \"redux-observable\";\n\nimport { composeEnhancers } from \"./utils\";\nimport rootEpic from \"./rootEpic\";\nimport rootReducer from \"./rootReducer\";\nimport services from \"../services\";\n\n/**\n * redux-observable\n */\nexport const epicMiddleware = createEpicMiddleware<\n  RootAction,\n  RootAction,\n  RootState\n>({\n  dependencies: services\n});\n\n// configure middlewares\nconst middlewares = [epicMiddleware];\n\n// compose enhancers\nconst enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\n// rehydrate state on app start\nconst initialState = {};\n\n// create store\nconst store = createStore(rootReducer, initialState, enhancer);\n\n// spawn redux-observable\nepicMiddleware.run(rootEpic);\n\n// export store singleton instance\nexport default store;\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\n\nimport { App } from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport \"./styles.css\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}